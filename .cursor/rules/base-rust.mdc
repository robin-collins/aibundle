---
description:
globs:
alwaysApply: true
---
## CORE PRINCIPLES

* **SOLID**: Write modular, extensible code. Each module/type should have a single responsibility. Avoid mixing unrelated concerns.
* **KISS**: Prefer simple, direct solutions over clever abstractions.
* **DRY**: Eliminate code duplication using functions, traits, or generics.
* **YAGNI**: Do not implement features or abstractions until they are needed.

## FORBIDDEN PATTERNS

DO NOT:

* Add "just in case" features or future requirements
* Create abstractions without immediate use
* Mix multiple responsibilities in a module or function
* Optimize prematurely (without profiling evidence)

## MANDATORY RULES

### 1. Project Structure & Dependency Management

* Use Cargo for all project, dependency, and build management.
* Specify dependencies in `Cargo.toml` under `[dependencies]`; keep `Cargo.toml` and `Cargo.lock` in sync.
* For binaries, commit `Cargo.lock`; for libraries, do not (except for CI/dev consistency).
* Organize code into logical modules; use `src/lib.rs` for library code and `src/main.rs` or `src/bin/` for executables.
* Rust source files and all I/O should use UTF-8 encoding.
* Maintain semantic versioning in `Cargo.toml`; keep any runtime version constants in sync.

### 2. Compiler, Linting & Toolchain

* Use the latest stable Rust toolchain, unless a nightly feature is required (document why).
* Use `rustfmt` for formatting. Apply consistent import and module ordering.
* Enforce warnings-as-errors in development and CI using `#![deny(warnings)]` and `cargo clippy -- -D warnings`.

### 3. Error Handling

* Use `Result<T, E>` for recoverable errors; prefer propagating with `?`.
* Use custom error types (`thiserror` for libraries, `anyhow` for binaries) for clarity.
* Use `panic!` only for unrecoverable logic errors.
* Do not use `.unwrap()` or `.expect()` except in test/example code.

### 4. Testing & Documentation

* Co-locate unit tests using `#[cfg(test)] mod tests`. Place integration tests in `tests/`.
* Ensure all public items have doc comments (`///`) with examples and error/panic conditions.
* Use module-level docs (`//!`) for high-level overviews.
* Run doc-tests and `cargo test` in CI.

### 5. Code Style & Organization

* Follow Rust naming conventions (snake\_case for fn/vars/modules, CamelCase for types/traits, SCREAMING\_SNAKE\_CASE for constants).
* Use constants for magic numbers/strings.
* Write small, focused functions.
* Document all `unsafe` code with a "SAFETY:" comment explaining invariants.

### 6. Performance & Optimization

* Do not optimize without measurement (profile/benchmark first).
* Use `cargo bench` or Criterion for benchmarks.
* Use the most appropriate data structures and algorithms; prefer readability over premature tuning.

### 7. Concurrency & Async

* Use threads, async runtimes (Tokio/async-std), and parallelism only as needed.
* Use safe concurrency primitives (`Arc`, `Mutex`, `RwLock`) when sharing state.
* Avoid blocking operations in async code.

### 8. FFI & Unsafe Code

* Encapsulate unsafe/FFI code behind safe abstractions.
* Clearly document ownership and invariants at boundaries.
* Test FFI code and use FFI-friendly types (`libc` or `std::os::raw`).

### 9. Logging & Diagnostics

* Use the `log` or `tracing` crate for diagnostics, never direct `println!` in libraries.
* Use appropriate log levels; provide context in messages.

### 10. Security Best Practices

* Validate and sanitize all external inputs.
* Never hardcode secrets; use environment variables/config outside version control.
* Use established cryptography crates; do not implement cryptography yourself.
* Regularly update dependencies and use `cargo audit`.
* Forbid unsafe code (`#![forbid(unsafe_code)]`) if possible.
* Do not log sensitive data (PII, secrets).

---

## GUIDELINES (Recommended, Not Mandatory)

* Prefer feature-gating optional functionality.
* Use iterators, combinators, and pattern matching for idiomatic control flow.
* Limit dependency count to reduce build times and avoid bloat.
* Keep imports and code organized for readability.
* Use doc-tests for API examples.
* Profile and optimize only after identifying actual bottlenecks.
* Avoid global mutable state; prefer passing context explicitly.
