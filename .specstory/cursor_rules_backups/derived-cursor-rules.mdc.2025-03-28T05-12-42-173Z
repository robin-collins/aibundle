
## PROJECT OVERVIEW

(No content provided in new interactions to update this section)

## CODE STYLE

- Adhere to Rust's coding conventions.
- Use `cargo clippy --all-targets --all-features` regularly to identify and fix style and performance issues.  Address all warnings;  the `cargo clippy --fix` command can be helpful but manual review is crucial.  Avoid `push_str("\n")`; use `push('\n')` for better efficiency.  Prefer `&Path` over `&PathBuf` where appropriate.  Refactor functions with excessive arguments (>8) into structs.
- Address borrow checker issues by carefully managing mutable and immutable borrows, potentially using techniques like creating temporary collections or cloning values as needed to avoid conflicts.  (Added 2025-03-23 based on interaction resolving borrow checker errors).
- Avoid moving values into closures unnecessarily; clone values when necessary to preserve them for later use. (Added 2025-03-23 based on interaction resolving move errors).
- When dealing with potential borrow checker issues, consider creating temporary collections to avoid simultaneous mutable and immutable borrows. (Added 2025-03-23)
- When moving values into closures, ensure that cloning is performed to prevent move errors and maintain data availability. (Added 2025-03-23)
- When encountering borrow checker errors, consider creating a temporary collection to hold values that are both immutably and mutably borrowed. This prevents conflicts that can arise from simultaneous borrowing. (Added 2025-03-23)
- When passing values into closures, ensure the values are cloned if there is a risk of moving ownership. This ensures data remains available for later use. (Added 2025-03-23)
- When encountering borrow checker errors, consider creating temporary collections to avoid simultaneous mutable and immutable borrows.  (Added 2025-03-23)  Clone values passed into closures to prevent accidental moves. (Added 2025-03-23)
- If a constant like `VERSION` is missing, define it in `lib.rs` or `main.rs` using `pub const VERSION: &str = env!("CARGO_PKG_VERSION");` or import it directly using the `env!` macro. (Added 2025-03-23 based on interaction resolving linting errors)
- Ensure all imports are used; remove unused imports. (Added 2025-03-23 based on interaction resolving linting errors)
- Explicitly manage ownership of values, especially strings, to avoid borrow checker errors related to moved values.  Cloning or using references as appropriate is crucial. (Added 2025-03-23)
- Add necessary imports, such as `dirs`, for external crates used in the code. (Added 2025-03-23)
- Ensure functions have correct number of arguments and types, resolving mismatches identified during linting. (Added 2025-03-23)
-  When encountering unused imports during refactoring from a monolithic codebase, carefully evaluate if the import represents planned functionality. If so, retain the import until the functionality is implemented; otherwise, remove it. (Added 2025-03-23)
- When encountering unused variables, prefix them with an underscore (`_`) to explicitly mark them as intentionally unused. (Added 2025-03-23)
- Using `&Path` instead of `&PathBuf` for the `is_path_ignored` function input is generally preferred for efficiency when you don't need to modify the path.  A single function accepting `&Path` is sufficient, as `&PathBuf` can be implicitly dereferenced to `&Path`. (Added 2025-03-23)
- Implement `is_path_ignored` function in `AppState` to handle path filtering. (Added 2025-03-23)
- Implement `is_binary_file` function as a utility function to handle binary file detection. (Added 2025-03-23)
- Implement `is_binary_file` function as a utility function to handle binary file detection. (Added 2025-03-24 based on interaction comparing monolithic and modular code)
- Correctly clone values before moving them to prevent borrow checker errors.  The cloning should occur *before* the move, not after. (Added 2025-03-24 based on user clarification)
- Ensure that cloning happens *before* the move to prevent borrow checker errors. (Added 2025-03-24 based on user clarification)
- Utilize `HashSet` where appropriate for managing collections of paths, mirroring the monolithic codebase's functionality. (Added 2025-03-24)
- When using `HashSet` for path management, ensure functionality mirrors the monolithic codebase. (Added 2025-03-24)
- Use the `CopyStats` struct returned by formatting functions to update the application state with file and folder counts. (Added 2025-03-24)
- The `base_dir` parameter in the `add_to_tree` function, while seemingly unused in the current modular implementation, was likely a remnant from the monolithic codebase's tree-building logic.  Further investigation is needed to determine its intended purpose and whether it should be removed or repurposed. (Added 2025-03-24)
- When encountering unused imports like `std::collections::HashSet` or `std::path::Path`, carefully review the monolithic codebase (`@monolithic/main.rs` and `@monolithic/fs/mod.rs`) to determine if the functionality they represent is planned for future implementation in the modular version. If so, retain the imports; otherwise, remove them. (Added 2025-03-26)
- Retain unused imports like `std::collections::HashSet` and `std::path::Path` if they represent planned functionality from the monolithic codebase (`@monolithic/main.rs` and `@monolithic/fs/mod.rs`), even if currently unused in the modular refactoring. Implement the intended functionality to utilize these imports. (Added 2025-03-26)
- When analysis reveals a lint error stems from incomplete or missing functionality, the recommendation should include a plan to implement the necessary feature(s) to resolve the error. Approval of such a recommendation explicitly includes approval to proceed with the proposed implementation step. The goal is to complete the refactoring, not just identify unused elements. (Added 2025-03-26)
- Ensure that all modules and functions used are publicly accessible (`pub`).  Address private module errors by making the necessary modules public in their respective `mod.rs` files. (Added 2025-03-26)
- Ensure that all types used, such as `OutputFormat`, correctly implement the `FromStr` and `Default` traits as required by the compiler.  This often involves implementing these traits for custom enum types. (Added 2025-03-26)
- When encountering `no field` errors during refactoring, carefully review the monolithic codebase to determine the correct access path for the required field.  In some cases, the field might be directly accessible, or it may be nested under a different structure than anticipated. (Added 2025-03-26)
- Retain unused imports like `std::collections::HashSet` and `std::path::Path` in `src/tui/state/search.rs` if they represent planned functionality from the monolithic codebase (`@monolithic/main.rs` and `@monolithic/fs/mod.rs`).  These imports will be utilized as the search functionality is fully implemented to mirror the monolithic codebase. (Added 2025-03-27)
- Explicitly use `Path` methods when working with file paths, even if implicit dereferencing from `PathBuf` is possible. This helps clarify intent and resolve linting issues. (Added 2025-03-27)
- Ensure that the `Modal` struct has a `message` associated function to handle the modal message display. (Added 2025-03-27)  This has been addressed by using `Modal::new` for creating modal messages.  The `Modal::new` function should be used to create modal messages. (Added 2025-03-26)
- Implement `toggle_select_all` to select/deselect all currently visible items (filtered or full list) and update the `selected_items` HashSet accordingly. (Added 2025-03-27) This has been implemented.
- Implement selection logic to correctly handle adding/removing items from `selected_items` HashSet when the list is filtered by search. (Added 2025-03-27) This has been implemented.
- Remove unused `std::collections::HashSet` import from `src/tui/state/search.rs` unless it's needed for future planned functionality. (Added 2025-03-27)
- When calling `Modal::new`, provide a third `u16` argument specifying the modal height. (Added 2025-03-27)
- Add `filtered_items: Vec<PathBuf>` field to `AppState` to resolve "no field" errors related to missing `filtered_items`. (Added 2025-03-28)
- Add `search_query: String` and `is_searching: bool` fields to `AppState`. (Added 2025-03-28)
- Implement search/filtering logic to populate `filtered_items` based on `search_query` and the full `items` list. (Added 2025-03-28)
- Iterate over collections using references (`&`) to avoid sizedness errors. (Added 2025-03-28)
- Remove `filtered_indices: Option<Vec<usize>>` field from `AppState` struct. (Added 2025-03-28)
- Update `AppState::update_search` to populate `filtered_items` based on `search_query` and the full `items` list.  If no search query, clone `items` to `filtered_items`. (Added 2025-03-28)
- Update `AppState::get_display_items` to return `filtered_items`. (Added 2025-03-28)
- Remove `AppState::get_original_index` function. (Added 2025-03-28)
- Update functions using `filtered_indices` to use `filtered_items` instead. (Added 2025-03-28)
- Retain unused `std::collections::HashSet` import in `src/models/app_config.rs` as it is likely needed for future planned functionality related to state management (mirroring the monolithic codebase). (Added 2025-03-28)
- Retain unused `std::path::PathBuf` import in `src/models/app_config.rs` as it is likely needed for future planned functionality related to file system paths (mirroring the monolithic codebase). (Added 2025-03-28)
- Add `use crate::models::app_config::CopyStats;` to `src/models/mod.rs` to resolve the unresolved import `enums::CopyStats`. (Added 2025-03-28 based on interaction resolving linting errors)
- Remove the unused import `ParseOutputFormatError` from `src/models/mod.rs`. (Added 2025-03-28 based on interaction resolving linting errors)
- Add `use crate::models::app_config::FullConfig;` to `src/cli/options.rs` to resolve the unresolved import `crate::models::FullConfig`. (Added 2025-03-28 based on interaction resolving linting errors)
- Add `selection_limit` field to `AppConfig` struct in `src/models/app_config.rs` to resolve missing field errors. (Added 2025-03-28 based on interaction resolving linting errors)
- Remove unused `HashMap` import from `src/output/format.rs`. (Added 2025-03-28 based on interaction resolving linting errors)
- Remove unused `CopyStats` and `IgnoreConfig` imports from `src/output/format.rs`. (Added 2025-03-28 based on interaction resolving linting errors)
- Update `src/output/format.rs` `process_directory` function to accept `&IgnoreConfig` and return `CopyStats`. (Added 2025-03-28)
- Update `src/output/json.rs` `format_json_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/markdown.rs` `format_markdown_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/xml.rs` `format_xml_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/llm.rs` `format_llm_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- In `src/tui/state/app_state.rs`, update the `copy_files` function to accept `&IgnoreConfig` instead of `bool`.  (Added 2025-03-28 based on interaction resolving mismatched types)
- Explicitly use `&Path` instead of `PathBuf` when passing paths to functions expecting `&Path`. (Added 2025-03-28 based on interaction resolving type errors)
- When encountering type errors related to paths in `src/tui/components/file_list.rs`, ensure that you are using references (`&Path`) where appropriate and avoid unnecessary conversions to `PathBuf`.  Specifically, adjust the map closure to correctly handle references. (Added 2025-03-28)
- When encountering type errors related to paths in `src/tui/components/file_list.rs`, ensure that you are using references (`&Path`) where appropriate and avoid unnecessary conversions to `PathBuf`. Specifically, adjust the map closure to correctly handle references. (Added 2025-03-28)
- When encountering type errors related to paths in `src/tui/components/file_list.rs`, ensure that you are using references (`&Path`) where appropriate and avoid unnecessary conversions to `PathBuf`. Specifically, adjust the map closure to correctly handle references. (Added 2025-03-28)
- In `src/tui/handlers/clipboard.rs`, change `use crate::models::{CopyStats, Node, OutputFormat};` to `use crate::models::{app_config::Node, CopyStats, OutputFormat};` to resolve the unresolved import `crate::models::Node`. (Added 2025-03-28)
- In `src/tui/handlers/clipboard.rs`, update the calls to `format_xml_output`, `format_markdown_output`, and `format_json_output` to pass `&app_state.ignore_config` instead of `app_state.ignore_config.include_binary_files` to resolve mismatched type errors. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, add `use crate::models::app_config::Node;` to resolve the unresolved import `crate::models::Node`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, add `use crate::fs::{recursive_search_helper_generic, format_selected_items};` to resolve the unresolved functions `recursive_search_helper_generic` and `format_selected_items`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, add `use crate::config::save_config;` to resolve the unresolved function `save_config`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, remove the unused import `Path`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, prefix the unused variable `selection_state` with an underscore: `_selection_state`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, ensure that the `format_selected_items` function is imported from the correct module (`crate::output`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, ensure that the `save_config` function is imported from the correct module (`crate::config`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, remove the unused import `Path`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, prefix the unused variable `selection_state` with an underscore (`_selection_state`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function call needs to be updated to include the config file path.  Use `crate::config::config_file_path()` to obtain the path. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function call needs to be updated to include the config file path. Use `crate::config::config_file_path()` to obtain the path. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function call should include the path to the config file, obtained using `crate::config::config_file_path()`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function requires both the `AppConfig` and the config file path as arguments. Use `crate::config::config_file_path()` to obtain the path. (Added 2025-03-28)
- Ensure that the `save_config` function is called with the correct arguments: `&app_state.config` and the result of `config_file_path()`, converted to `&str` using `.to_str().unwrap_or("")`. (Added 2025-03-28 based on interaction resolving type errors)
- To resolve the `match` arm type mismatch in `src/tui/handlers/keyboard.rs`, change the return type of `handle_key_event` to `Result<(), std::io::Error>`. Use the `?` operator to propagate errors from functions like `FileOpsHandler::toggle_gitignore`. (Added 2025-03-28)
- Implement `pub fn toggle_folder_expansion(&mut self, app_state: &mut AppState, selection_state: &SelectionState) -> io::Result<()>` in `src/tui/handlers/file_ops.rs` to handle folder expansion/collapse.  This function should mirror the functionality found in `monolithic/main.rs:1637`. (Added 2025-03-28)


## FOLDER ORGANIZATION

(No content provided in new interactions to update this section)

## TECH STACK

- Rust (version information will need to be added as it becomes available)
- Cargo (version information will need to be added as it becomes available)
- Clippy (version information will need to be added as it becomes available)
- clap (version information will need to be added as it becomes available) (Added 2025-03-23)
- dirs (version information will need to be added as it becomes available) (Added 2025-03-23)
- clipboard (version information will need to be added as it becomes available) (Added 2025-03-26)


## PROJECT-SPECIFIC STANDARDS

(No content provided in new interactions to update this section)


## WORKFLOW & RELEASE RULES

- Regularly run `cargo clippy --all-targets --all-features` before commits and releases.
- Address all Clippy warnings before merging code.
- Carefully review code for borrow checker issues and potential move errors before commits and releases. (Added 2025-03-23)
- During refactoring from a monolithic codebase, ensure that all functionality is preserved.  Address any lingering unused imports by either removing them or implementing the functionality they represent. (Added 2025-03-23)
- During refactoring from a monolithic codebase, retain unused imports that represent planned functionality. Implement this functionality and remove the `#[allow(unused_imports)]` attribute or remove the import once implemented. (Added 2025-03-23)
- Thoroughly test code changes after addressing linting errors to ensure functionality remains intact. (Added 2025-03-23)
- Address all compiler errors before committing or releasing code. (Added 2025-03-23)
- Ensure the use of `HashSet` for managing collections of paths mirrors the functionality in the monolithic codebase. (Added 2025-03-24)
- When updating the application state with copy statistics, ensure that the `AppState` is mutably borrowed to allow modification of the `last_copy_stats` field. (Added 2025-03-24)
- Implement planned functionality to utilize imports previously marked as unused, such as `std::collections::HashSet` and `std::path::Path`, based on their usage in the monolithic codebase. (Added 2025-03-26)
- Ensure all modules and functions are publicly accessible (`pub`) to avoid private module errors. (Added 2025-03-26)
- Ensure `FromStr` and `Default` traits are implemented for all necessary types. (Added 2025-03-26)
- Ensure all modules are publicly accessible to avoid private module errors. (Added 2025-03-26)
- When implementing search functionality, ensure it mirrors the functionality in the monolithic codebase (@main.rs and related modules).  This includes using appropriate data structures for managing search results and selected items. (Added 2025-03-27)
- When resolving linting errors related to unused imports, prioritize implementing planned functionality from the monolithic codebase rather than simply removing the imports. (Added 2025-03-27)
- Implement selection logic to correctly handle adding/removing items from `selected_items` HashSet when the list is filtered by search. (Added 2025-03-27) This has been implemented.
- Implement `toggle_select_all` to select/deselect all currently visible items (filtered or full list) and update the `selected_items` HashSet accordingly. (Added 2025-03-27) This has been implemented.
- Remove unused `std::collections::HashSet` import from `src/tui/state/search.rs` unless it's part of planned functionality. (Added 2025-03-27)
- When using `Modal::new`, ensure a third `u16` argument (for modal height) is provided. (Added 2025-03-27)
- Implement the search functionality to populate the `filtered_items` vector in `AppState`. (Added 2025-03-28)
- Add `filtered_items: Vec<PathBuf>` field to `AppState` struct. (Added 2025-03-28)  Remove `filtered_indices: Option<Vec<usize>>` field from `AppState` struct. (Added 2025-03-28)
- Update `AppState::update_search` to populate `filtered_items` based on `search_query` and the full `items` list.  If no search query, clone `items` to `filtered_items`. (Added 2025-03-28)
- Update `AppState::get_display_items` to return `filtered_items`. (Added 2025-03-28)
- Remove `AppState::get_original_index` function. (Added 2025-03-28)
- Update functions using `filtered_indices` to use `filtered_items` instead. (Added 2025-03-28)
- Remove the `#[derive(Default)]` attribute from the `AppConfig` struct definition in `src/models/app_config.rs` to resolve conflicting `Default` implementations. (Added 2025-03-28)
- Add `selection_limit` field to `AppConfig` struct in `src/models/app_config.rs`. (Added 2025-03-28)
- Update `src/output/format.rs` `process_directory` function to accept `&IgnoreConfig` and return `CopyStats`. (Added 2025-03-28)
- Update `src/output/json.rs` `format_json_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/markdown.rs` `format_markdown_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/xml.rs` `format_xml_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/output/llm.rs` `format_llm_output` function to accept `&IgnoreConfig` and correctly handle the `CopyStats` return type from `process_directory`. (Added 2025-03-28)
- Update `src/tui/state/app_state.rs` `copy_files` function to accept `&IgnoreConfig` instead of `bool`. (Added 2025-03-28)
- Ensure that all functions correctly handle paths using `&Path` where appropriate, avoiding unnecessary cloning or conversion from `PathBuf`. (Added 2025-03-28)
- When encountering type errors related to paths, explicitly use `&Path` instead of `PathBuf` when passing paths to functions expecting `&Path`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, ensure that the `format_selected_items` function is imported from the correct module (`crate::output`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, ensure that the `save_config` function is imported from the correct module (`crate::config`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, remove the unused import `Path`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, prefix the unused variable `selection_state` with an underscore (`_selection_state`). (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function call should include the path to the config file, obtained using `crate::config::config_file_path()`. (Added 2025-03-28)
- In `src/tui/handlers/file_ops.rs`, the `save_config` function requires both the `AppConfig` and the config file path as arguments. Use `crate::config::config_file_path()` to obtain the path. (Added 2025-03-28)
-  In `src/tui/handlers/file_ops.rs`, ensure that the `save_config` function is called with the correct arguments and types.  The config path should be converted to a `&str` using `.to_str().unwrap_or("")` before being passed to the function. (Added 2025-03-28)
- Change the return type of `handle_key_event` in `src/tui/handlers/keyboard.rs` to `io::Result<()>`. Use the `?` operator to propagate errors. (Added 2025-03-28)
- Implement `pub fn toggle_folder_expansion(&mut self, app_state: &mut AppState, selection_state: &SelectionState) -> io::Result<()>` in `src/tui/handlers/file_ops.rs`. (Added 2025-03-28)


## REFERENCE EXAMPLES

(No content provided in new interactions to update this section)

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

(No content provided in new interactions to update this section)

## DEBUGGING

- Utilize `cargo clippy --all-targets --all-features` for identifying potential issues early.
- Employ systematic debugging techniques to resolve issues indicated by Clippy.
- Pay close attention to borrow checker errors and move errors reported by the compiler. Carefully review code for potential issues related to mutable and immutable borrows and value movement into closures. (Added 2025-03-23)
- When resolving borrow checker errors, consider using temporary collections to manage simultaneous mutable and immutable borrows. (Added 2025-03-23)
- When resolving move errors, ensure values are cloned before being moved into closures to prevent data loss. (Added 2025-03-23)
- For borrow checker errors, consider creating temporary collections to avoid simultaneous mutable and immutable borrows. (Added 2025-03-23)
- For move errors, ensure values are cloned before moving them into closures. (Added 2025-03-23)
- When debugging during a refactoring process from a monolithic codebase, compare the behavior of the refactored code to the original code to ensure that all functionality is preserved. (Added 2025-03-23)
- When debugging during refactoring, pay close attention to the preservation of functionality from the original monolithic codebase. Ensure that any unused imports represent planned functionality, and implement or remove them accordingly. (Added 2025-03-23)
- Carefully examine compiler error messages related to missing types or modules. Ensure that necessary imports are included and that module structures are correctly defined. (Added 2025-03-23)
- Thoroughly investigate and resolve all compiler errors before proceeding. (Added 2025-03-23)
- Ensure that cloning happens *before* the move to prevent borrow checker errors. (Added 2025-03-24 based on user clarification)
- When debugging `HashSet` usage, ensure that its application mirrors the functionality in the monolithic codebase. (Added 2025-03-24)
- When debugging issues related to updating application state with copy statistics, ensure that the `AppState` is mutably borrowed. (Added 2025-03-24)
- When debugging unused parameters, investigate their origin and intended purpose within the context of the original monolithic codebase. (Added 2025-03-24)
- When debugging unused imports, consult the monolithic codebase to determine if the import represents planned functionality. (Added 2025-03-26)
- When debugging private module errors, ensure that the modules are declared public (`pub`) in their respective `mod.rs` files. (Added 2025-03-26)
- When debugging trait bound errors, ensure that the required traits (`FromStr`, `Default`) are implemented for all custom types. (Added 2025-03-26)
- When debugging `no field` errors, cross-reference with the monolithic codebase to verify the correct field access path. (Added 2025-03-26)
- When debugging search functionality, compare the implementation to the monolithic codebase (@main.rs and related modules) to ensure that all functionality is preserved. Pay close attention to how search results and selected items are managed. (Added 2025-03-27)
- When debugging unused imports in the context of refactoring from a monolithic codebase, consider if the import represents planned functionality that will be implemented later. If so, retain the import. (Added 2025-03-27)
- Implement a `message` associated function for the `Modal` struct to display simple informational messages. (Added 2025-03-27) This has been addressed by using `Modal::new` for creating modal messages.
- When debugging `Modal::new` calls, ensure a third `u16` argument (for modal height) is provided. (Added 2025-03-27)
- When debugging `no field` errors, ensure the `filtered_items` field is added to the `AppState` struct and the search logic is implemented to populate it. (Added 2025-03-28)
- When debugging sizedness errors, ensure that you are iterating over collections using references (`&`) instead of values. (Added 2025-03-28)
- When debugging compilation errors related to missing fields in `AppState`, ensure that the `filtered_items` field is added and that the `update_search` function populates this field correctly, mirroring the functionality in the monolithic codebase. (Added 2025-03-28)
- When debugging conflicting `Default` implementations, ensure that only one valid implementation exists for the struct.  Prefer explicit implementations over derived implementations when specific default values are required. (Added 2025-03-28)
- When debugging unresolved imports, ensure that the correct path to the import is specified and the necessary modules are publicly accessible. (Added 2025-03-28)
- When debugging missing fields in struct initializers, ensure that all required fields are included based on the struct definition and intended functionality. (Added 2025-03-28)
- When debugging mismatched types in function calls, ensure that the function arguments and return types match the function definition and usage in the monolithic codebase. (Added 2025-03-28)
- When debugging type errors related to paths, ensure that you are using references (`&Path`) where appropriate and avoid unnecessary conversions to `PathBuf`. (Added 2025-03-28)
- When debugging compilation errors in `src/tui/handlers/file_ops.rs`, carefully review the monolithic codebase (`@monolithic/main.rs`) to understand the intended functionality and ensure that the modular implementation matches. Specifically, verify the locations of `format_selected_items` and `save_config` functions. (Added 2025-03-2